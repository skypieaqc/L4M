<!DOCTYPE html>
<html>
<head>
    <title>3D Hexagonal Panel Sistemi</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            font-family: Arial, sans-serif;
            background: #222;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #scene {
            position: relative;
            width: 100%;
            height: 100%;
            transform-style: preserve-3d;
            perspective: 2000px;
        }

        .panel {
            position: absolute;
            width: 300px;
            height: 400px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 0;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 5rem;
            font-weight: bold;
            color: #333;
            transition: all 0.8s ease;
            backface-visibility: hidden;
            transform-origin: center center;
            left: 50%;
            top: 50%;
            margin-left: -150px;
            margin-top: -200px;
            /* Dikdörtgen görünüm için heksagon kapatıldı */
            border: 2px solid rgba(255,255,255,0.6);
            background-image: linear-gradient(180deg, rgba(255,255,255,0.98), rgba(238,238,238,0.95));
        }

        .nav-arrow {
            position: fixed;
            top: 50%;
            transform: translateY(-50%);
            font-size: 3rem;
            color: white;
            cursor: pointer;
            z-index: 100;
            text-shadow: 0 2px 5px rgba(0,0,0,0.5);
            background: rgba(0,0,0,0.3);
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
            user-select: none;
        }

            .nav-arrow:hover {
                background: rgba(0,0,0,0.6);
                transform: translateY(-50%) scale(1.1);
            }

        #leftArrow {
            left: 50px;
        }

        #rightArrow {
            right: 50px;
        }
    </style>
</head>
<body>
    <div id="scene">
        <!-- Paneller buraya eklenecek -->
    </div>

    <div class="nav-arrow" id="leftArrow">❮</div>
    <div class="nav-arrow" id="rightArrow">❯</div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const scene = document.getElementById('scene');
            const leftArrow = document.getElementById('leftArrow');
            const rightArrow = document.getElementById('rightArrow');

            // Panel verileri
            const panels = [
                { id: 1, content: '1' },
                { id: 2, content: '2' },
                { id: 3, content: '3' },
                { id: 4, content: '4' },
                { id: 5, content: '5' },
                { id: 6, content: '6' }
            ];

            // Panel elemanlarını oluştur
            const panelElements = [];
            panels.forEach(panel => {
                const el = document.createElement('div');
                el.className = 'panel';
                el.textContent = panel.content;
                el.dataset.id = panel.id;
                scene.appendChild(el);
                panelElements.push(el);
            });

            // Başlangıç pozisyonlarını ayarla
            updatePanelPositions(0);

            // Dönüş fonksiyonu
            let currentAngle = 0;
            const angleStep = 60; // 360/6=60 derece

            function rotate(angle) {
                currentAngle += angle;
                updatePanelPositions(currentAngle);
            }

            function normalizeAngleDeg(deg) {
                // -180 ile 180 aralığına normalize et
                let a = ((deg + 180) % 360 + 360) % 360 - 180;
                return a;
            }

            function updatePanelPositions(angle) {
                const radius = 600; // Yarıçap
                const sceneHeight = scene.clientHeight;

                // Panel ölçüleri ve alt hizalama için baz Y (alt kenardan 20px yukarıda)
                // transform referansı merkez olduğu için, alt hizalama: merkezden aşağı doğru ofset
                const samplePanel = panelElements[0];
                const panelHalfHeight = samplePanel ? samplePanel.offsetHeight / 2 : 200; // default 400/2
                const baseBottomMargin = 20;
                const yFrontBase = Math.max(0, (sceneHeight / 2) - panelHalfHeight - baseBottomMargin);
                const stepY = 120; // her arka katman için yükseklik artışı

                panelElements.forEach((panel, index) => {
                    const rawAngle = angle + index * 60; // ham açı
                    const panelAngleNorm = normalizeAngleDeg(rawAngle); // -180..180
                    const rad = (rawAngle % 360) * Math.PI / 180;

                    // 3D pozisyonları hesapla (0° önde, 180° arkada)
                    const x = Math.sin(rad) * radius;
                    const z = Math.cos(rad) * radius;

                    // Katman belirleme ve opaklık/ölçek
                    const absA = Math.abs(panelAngleNorm);
                    let layer; // 0: ön, 1: ±60, 2: ±120, 3: 180
                    if (absA < 30) layer = 0;
                    else if (absA < 90) layer = 1;
                    else if (absA < 150) layer = 2;
                    else layer = 3;

                    const opacity = Math.max(0, 1 - 0.2 * layer); // 1.0, 0.8, 0.6, 0.4
                    const scale = 1 - 0.1 * layer; // 1.0, 0.9, 0.8, 0.7

                    // Dikey ofset: ön en aşağıda, sonra her katmanda biraz daha yukarı
                    const y = yFrontBase - (stepY * layer);

                    // Transform uygula: konumlandır + Y ekseninde konuma göre döndür + ölçek
                    panel.style.transform = `
                        translate3d(${x}px, ${y}px, ${z}px)
                        rotateY(${panelAngleNorm}deg)
                        scale(${scale})
                    `;

                    panel.style.opacity = opacity;

                    // Z sıralama yardımı (perspektif zaten derinliği verir)
                    panel.style.zIndex = String(Math.round(1000 + z));
                });
            }

            // Oklara tıklama olayları
            leftArrow.addEventListener('click', () => {
                rotate(angleStep);
            });

            rightArrow.addEventListener('click', () => {
                rotate(-angleStep);
            });

            // Klavye okları ile gezinme
            document.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowLeft') rotate(angleStep);
                if (e.key === 'ArrowRight') rotate(-angleStep);
            });

            // Pencere boyutu değiştiğinde yenile
            window.addEventListener('resize', () => {
                updatePanelPositions(currentAngle);
            });
        });
    </script>
</body>
</html>